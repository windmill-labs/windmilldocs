import React, { useEffect, useState } from 'react';
import LandingSection from './LandingSection';
import {
	Code,
	ExternalLink,
	FastForward,
	LayoutDashboard,
	List,
	Play,
	PlayCircle,
	Monitor
} from 'lucide-react';
import { VolumeX } from 'lucide-react';

const videoTabs = [
	{
		label: 'Script Editor',
		icon: Code,
		id: 'script-editor',
		videoUrl: 'https://www.youtube.com/embed/QRf8C8qF7CY',
		duration: '11 min'
	},
	{
		label: 'Flow Editor',
		icon: List,
		id: 'flow-editor',
		videoUrl: 'https://www.youtube.com/embed/yE-eDNWTj3g',
		duration: '17 min'
	},
	{
		label: 'App Editor',
		icon: LayoutDashboard,
		id: 'app-editor',
		videoUrl: 'https://www.youtube.com/embed/CNtRLDXbfOE',
		duration: '6 min'
	},
	{
		label: 'Local Development',
		icon: Monitor,
		id: 'local-development',
		videoUrl: 'https://www.youtube.com/embed/sxNW_6J4RG8',
		duration: '3 min'
	}
];

const tabs = [
	{
		label: 'Scripts',
		icon: Code,
		id: 'scripts',
		data: []
	},
	{
		label: 'Flows',
		icon: List,
		id: 'flows',
		data: []
	},
	{
		label: 'Apps',
		icon: LayoutDashboard,
		id: 'apps',
		data: []
	}
];

export default function HeroExample() {
	const [hookProps] = useState({
		tabs: tabs,
		initialTabId: tabs[0].id
	});
	const [played, setPlayed] = useState(false);
	const [selectedVideoTab, setSelectedVideoTab] = useState(videoTabs[0].id);
	const [isLoading, setIsLoading] = useState(false);

	// When played toggles to true, start the video
	useEffect(() => {
		const video = document.getElementById('main-video') as HTMLVideoElement;
		if (played) {
			video.play();
		}
	}, [played]);

	const currentVideo = videoTabs.find(tab => tab.id === selectedVideoTab) || videoTabs[0];

	const handleVideoTabChange = (tabId: string) => {
		if (tabId === selectedVideoTab) return;
		
		setIsLoading(true);
		setSelectedVideoTab(tabId);
		
		// Reset loading state after a short delay to allow video to start loading
		setTimeout(() => {
			setIsLoading(false);
		}, 300);
	};

	return (
		<div className="relative">
			<LandingSection bgClass="">
				<div className="w-full gap-6 flex flex-col">
					<h1 className="tracking-tight leading-tight text-left font-bold text-transparent bg-clip-text bg-gradient-to-br from-slate-500 to-slate-800 dark:from-slate-100 dark:to-slate-500 ">
						Get a tour of Windmill
					</h1>
					<div className="flex flex-col gap-4">
						<div className="flex flex-col gap-2">
							<p className="text-lg">
								Make your scripts production grade and build all of your internal tools with Python,
								TypeScript, Go, PHP, Rust, Bash, C#, SQL and more. <br /> Compose your scripts as workflows using low-code.{' '}<br />
								Share an autogenerated UI or build one using low-code. Run it reliably at scale on your infra or ours, with permissioning and monitoring included. Develop on the platform or locally with the CLI, sync with a remote Git repository, and use the Windmill VS Code extension. <br />
								Fully open-source and easy to deploy on small and large infra. Any dependency with zero-config.
							</p>
						</div>
						<div className="grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6">
							<div className="flex flex-col gap-2">
								{videoTabs.map((tab) => {
									const Icon = tab.icon;
									return (
										<button
											key={tab.id}
											onClick={() => handleVideoTabChange(tab.id)}
											className={`flex items-center gap-3 px-4 py-3 rounded-lg transition-all text-left ${
												selectedVideoTab === tab.id
													? 'bg-blue-50 dark:bg-blue-950 text-blue-600 dark:text-blue-400'
													: 'hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-300'
											}`}
										>
											<Icon size={18} />
											<span className="font-medium">{tab.label}</span>
											<span className="text-xs text-gray-500 dark:text-gray-400">({tab.duration})</span>
										</button>
									);
								})}
							</div>
							<div className="w-full relative" style={{ paddingBottom: '56.25%' }}>
								<iframe
									key={selectedVideoTab}
									src={currentVideo.videoUrl}
									title="YouTube video player"
									allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
									allowFullScreen={true}
									className={`rounded-xl absolute top-0 left-0 w-full h-full transition-opacity duration-300 ${
										isLoading ? 'opacity-50' : 'opacity-100'
									}`}
								/>
								
								{/* Loading overlay */}
								{isLoading && (
									<div className="absolute inset-0 bg-gray-50 dark:bg-gray-900 rounded-xl flex items-center justify-center">
										<div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
									</div>
								)}
							</div>
						</div>
					</div>
					<div className="flex flex-row justify-end w-full gap-4 items-center">
						<div className="flex flex-col gap-1">
							<div className="text-sm font-medium ">{'Short on time?'}</div>
							<div className="text-xs">{'Check out our 2-minute tour!'}</div>
						</div>
						<a
							href="https://www.youtube.com/watch?v=pJh2fdstV-A"
							target="_blank"
							rel="noreferrer"
							className="h-8 text-xs font-medium  bg-blue-100 !text-blue-600 shadow-sm hover:bg-blue-200 hover:text-blue-800 !no-underline flex flex-row gap-1 items-center rounded-md justify-center py-1 px-3 hover:bg-opacity-80 transition-all"
						>
							{'Watch Now'}
							<ExternalLink size={16} className="!text-blue-600" />
						</a>
					</div>
				</div>
			</LandingSection>
		</div>
	);
}
