# docs/.github/workflows/create-docs-pr.yml
on:
  workflow_call:
    inputs:
      pr_number:
        required: true
        type: number
      repo:
        required: true
        type: string
      comment_text:
        required: true
        type: string
    secrets:
      DOCS_TOKEN:
        required: true
      GOOGLE_API_KEY:
        required: true

jobs:
  generate-and-pr:
    runs-on: ubicloud-standard-8

    steps:
      - name: Fetch PR details
        id: fetch-pr
        run: |
          PR_DETAILS=$(curl -s \
            -H "Authorization: token ${{ secrets.DOCS_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/windmill-labs/${{ inputs.repo }}/pulls/${{ inputs.pr_number }}")

          PR_TITLE_RAW=$(jq -r '.title // ""' <<< "$PR_DETAILS")
          PR_BODY_RAW=$(jq -r '.body // ""' <<< "$PR_DETAILS")

          echo "PR_TITLE=$(printf '%q' "$PR_TITLE_RAW")" >> $GITHUB_ENV
          echo "PR_BODY=$(printf '%q' "$PR_BODY_RAW")" >> $GITHUB_ENV
          PR_COMMENT=$(echo "${{ inputs.comment_text }}" | sed 's/\/docs//g')
          echo "PR_COMMENT=$PR_COMMENT" >> $GITHUB_ENV

      - uses: actions/checkout@v3
        with:
          repository: windmill-labs/windmilldocs
          token: ${{ secrets.DOCS_TOKEN }}

      - name: Probe Chat for Relevant Files
        id: probe_files
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          echo "Running probe-chat to find relevant files..."
          printf -v MESSAGE_FOR_PROBE \
          'I made some changes in another repo. I will give you the PR informations that made these changes.
          PR_TITLE: \\n%s
          PR_BODY: \\n%s

          Here is the user''s request related to the changes:
          PR_COMMENT: \\n%s

          Your role is ONLY to give me the files that are relevant to the request in this repo and nothing else.
          For exemple, if the pr mentions flows, search for flows related files in this repo.
          Give me all the files relevant to this request. Your output MUST be a single json array that can be parsed with programatic json parsing, with the relevant files.
          DO NOT INCLUDE ANY OTHER TEXT IN YOUR OUTPUT. ONLY THE JSON ARRAY. Example of output: ["file1.py", "file2.py"]' \
                    "${PR_TITLE}" \
                    "${PR_BODY}" \
                    "${PR_COMMENT}"
          set -o pipefail
          PROBE_OUTPUT=$(npx --yes @buger/probe-chat@latest --max-iterations 50 --model-name gemini-2.5-pro-preview-05-06 --message "$MESSAGE_FOR_PROBE") || {
            echo "::error::probe-chat command failed. Output:"
            echo "$PROBE_OUTPUT"
            exit 1
          }
          set +o pipefail
          echo "Probe-chat raw output:"
          echo "$PROBE_OUTPUT"

          JSON_FILES=$(echo "$PROBE_OUTPUT" | sed -n '/^\s*\[/,$p' | sed '/^\s*\]/q')
          echo "Extracted JSON block:"
          echo "$JSON_FILES"

          FILES_LIST=$(echo "$JSON_FILES" | jq -e -r '[.[] | select(type == "string" and . != "" and . != null and (endswith("/") | not))] | map(@sh) | join(" ")' || echo "")

          if [[ -z "$FILES_LIST" ]]; then
             echo "::warning::probe-chat did not identify any relevant files."
          fi

          echo "Formatted files list for aider: $FILES_LIST"
          echo "FILES_TO_EDIT=$FILES_LIST" >> $GITHUB_ENV

      - name: Create new branch
        run: |
          # Check if branch already exists remotely
          if git ls-remote --heads origin docs-update-for-${{ inputs.repo }}-pr-${{ inputs.pr_number }} | grep -q docs-update-for-${{ inputs.repo }}-pr-${{ inputs.pr_number }}; then
            # Branch exists, check it out
            git fetch origin docs-update-for-${{ inputs.repo }}-pr-${{ inputs.pr_number }}
            git checkout docs-update-for-${{ inputs.repo }}-pr-${{ inputs.pr_number }}
          else
            # Create new branch
            git checkout -b docs-update-for-${{ inputs.repo }}-pr-${{ inputs.pr_number }}
          fi

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install Aider and Dependencies
        run: |
          python -m pip install aider-install; aider-install
          pip install -U google-generativeai
          sudo apt-get update && sudo apt-get install -y jq

      - name: Run Aider
        id: aider
        env:
          GEMINI_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          printf -v PROMPT \
          'I made some changes in another repo. I will give you the PR informations that made these changes.
          PR_TITLE: \\n%s
          PR_BODY: \\n%s

          Here is the user''s request related to the changes:
          PR_COMMENT: \\n%s

          I want you to update the files in this repo to reflect the changes in the other repo. It can be a change in an existing file or a complete new file.' \
                    "${PR_TITLE}" \
                    "${PR_BODY}" \
                    "${PR_COMMENT}"

          echo "Files identified by probe-chat: ${{ env.FILES_TO_EDIT }}"
          aider \
            --read .cursor/rules/docs.mdc \
            ${{ env.FILES_TO_EDIT }} \
            --model gemini/gemini-2.5-pro-preview-05-06 \
            --message "$PROMPT" \
            --yes \
            --no-check-update \
            --auto-commits \
            --no-analytics \
            --no-gitignore \
            | tee .github/aider/aider-output.txt || true
          echo "Aider command completed. Output saved to .github/aider/aider-output.txt"
          # Check if there are any changes to commit
          if [[ -z "$(git status --porcelain)" ]]; then
            echo "No changes detected after running Aider."
            echo "HAS_CHANGES=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          git push origin docs-update-for-${{ inputs.repo }}-pr-${{ inputs.pr_number }}

      - name: Create docs PR
        env:
          GH_TOKEN: ${{ secrets.DOCS_TOKEN }}
        run: |
          gh pr create \
            --title "docs: update for ${{ inputs.repo }}#${{ inputs.pr_number }}" \
            --body "This PR was auto-generated to bring the docs up to date for [PR #${{ inputs.pr_number }}](https://github.com/windmill-labs/${{ inputs.repo }}/pull/${{ inputs.pr_number }}) in the main repo." \
            --head docs-update-for-${{ inputs.repo }}-pr-${{ inputs.pr_number }} \
            --base main
